alias physicalSP S0;
physicalSP = ([PTBR + 2*(SP/512)]*512) + (SP%512);

alias sysCallNo S1;
sysCallNo = [physicalSP - 1];
alias newPCB S5;

if (sysCallNo == 8) then
	alias currentPID S2;
	currentPID = (PTBR - 1024)/8;
	
	alias currentPCB S3;
	if(currentPID<32) then
		currentPCB = READY_LIST + 32*currentPID;
	endif;
	if (currentPID>31) then
		currentPID = (31744 - 1024)/8;
		currentPCB=32566+32*currentPID;
	endif;
	alias newPID S4;
	newPID=0;
	while(newPID < 32) do
		if ([READY_LIST + 32*newPID + 1] == 0) then
			break;
		endif;
		newPID=newPID+1;
	endwhile;

	if(newPID<32) then
	
	newPCB=READY_LIST+32*newPID;
	[newPCB]=newPID;
	endif;

	if(newPID==32) then
		newPID=32;
		while(newPID <48) do
		if ([32566 + 32*(newPID-32) + 1] == 0) then
			break;
		endif;
		newPID=newPID+1;
		endwhile;
		newPCB=32566+32*(newPID-32);
		[newPCB]=newPID+32;
	

	if (newPID == 48) then
		[physicalSP - 2]=-1;
		ireturn;
	endif;
	endif;

	

	alias freePageIndex S6;
	alias pageIndex S7;
	alias counter S8;
	alias DataBlock S9;
	freePageIndex=0;
	while(freePageIndex < 62) do
		if ([MEM_LIST + freePageIndex] == 0) then
			[MEM_LIST + freePageIndex]=1;
			break;
		endif;
		freePageIndex=freePageIndex+1;
	endwhile;

	if (freePageIndex == 62) then
		pageIndex=0;
		counter=0;
		while(1) do
			if (counter == 256) then
				[physicalSP - 2]=-1;
				ireturn;
			endif;

			if (pageIndex >= 384) then
				pageIndex=pageIndex-384;
			endif;

			if(pageIndex/8==currentPID) then
				pageIndex=pageIndex+2;
				counter=counter+2;
				continue;
			endif;

			if(pageIndex<256) then

			if ([PAGE_TABLE + pageIndex + 1] == "01") then
				if ([MEM_LIST + [PAGE_TABLE + pageIndex]] > 1) then
					pageIndex=pageIndex+2;
					counter=counter+1;
					continue;
				endif;

				DataBlock=448;
				while(DataBlock < 512) do
					if ([DISK_LIST + DataBlock] == 0) then
						break;
					endif;
					DataBlock=DataBlock+1;
				endwhile;

				if (DataBlock == 512) then
					[physicalSP - 2]=-1;
					ireturn;
				endif;

				store([PAGE_TABLE + pageIndex],DataBlock);
				[DISK_LIST + DataBlock]=1;
				store(6,20);

				freePageIndex=[PAGE_TABLE + pageIndex];
				[PAGE_TABLE + pageIndex]=DataBlock;
				[PAGE_TABLE + pageIndex + 1]="00";
				break;
			endif;

			if ([PAGE_TABLE + pageIndex + 1] == "11") then
				[PAGE_TABLE + pageIndex + 1]="01";
			endif;

		else
			if ([31744 + (pageIndex-256) + 1] == "01") then
				if ([MEM_LIST + [31744 + (pageIndex-256)]] > 1) then
					pageIndex=pageIndex+2;
					counter=counter+1;
					continue;
				endif;

				DataBlock=448;
				while(DataBlock < 512) do
					if ([DISK_LIST + DataBlock] == 0) then
						break;
					endif;
					DataBlock=DataBlock+1;
				endwhile;

				if (DataBlock == 512) then
					[physicalSP - 2]=-1;
					ireturn;
				endif;

				store([31744 + (pageIndex-256)],DataBlock);
				[DISK_LIST + DataBlock]=1;
				store(6,20);

				freePageIndex=[31744 + (pageIndex-256)];
				[31744 + (pageIndex-256)]=DataBlock;
				[31744 + (pageIndex-256)+ 1]="00";
				break;
			endif;

			if ([31744 + (pageIndex-256)+ 1] == "11") then
				[31744 + (pageIndex-256)+ 1]="01";
			endif;
		endif;

			pageIndex=pageIndex+2;
			counter=counter+1;
		endwhile;
	endif;

	alias newPTBR S10;
	if(newPID<32) then
	newPTBR=PAGE_TABLE + 8*newPID;

	else
	newPTBR=31277 + 8*(newPID-32);

	counter=0;
	pageIndex=PTLR-1;
	while(counter < 512) do
		[512*freePageIndex + counter]=[512*[PTBR + 2*pageIndex] + counter];
		counter=counter+1;
	endwhile;

	[newPTBR + 2*pageIndex]=freePageIndex;
	[newPTBR + 2*pageIndex + 1]="01";

	pageIndex=0;
	while(pageIndex < (PTLR - 1)) do
		DataBlock=[PTBR + 2*pageIndex];
		[newPTBR + 2*pageIndex]=[PTBR + 2*pageIndex];
		[newPTBR + 2*pageIndex + 1]=[PTBR + 2*pageIndex + 1];
		if (([PTBR + 2*pageIndex + 1] == "01") || ([PTBR + 2*pageIndex + 1] == "11")) then
			[MEM_LIST + DataBlock]=[MEM_LIST + DataBlock]+1;
		else
			if (DataBlock >= 448) then
				[DISK_LIST + DataBlock]=[DISK_LIST + DataBlock]+1;
				store(6,20);
			endif;
		endif;
		pageIndex=pageIndex+1;
	endwhile;

	[newPCB + 2]=BP;
	[newPCB + 3]=SP-1;
	[newPCB + 4]=[physicalSP];
	[newPCB + 5]=newPTBR;
	[newPCB + 6]=PTLR;
	[newPCB + 7]=R0;
	[newPCB + 8]=R1;
	[newPCB + 9]=R2;
	[newPCB + 10]=R3;
	[newPCB + 11]=R4;
	[newPCB + 12]=R5;
	[newPCB + 13]=R6;
	[newPCB + 14]=R7;

	alias FileIndex S11;
	counter=0;
	while(counter < 8) do
		[newPCB + 2*counter + 15]=[currentPCB + 2*counter + 15];
		[newPCB + 2*counter + 16]=[currentPCB + 2*counter + 16];
		FileIndex=[newPCB + 2*counter + 15];

		if (FileIndex != -1) then
			[FILE_TABLE + 2*FileIndex + 1]=[FILE_TABLE + 2*FileIndex + 1]+1;
		endif;
		counter=counter+1;
	endwhile;

	[newPCB + 1]=1;
	[newPCB + 31]=currentPID;
	[physicalSP - 2]=newPID;

	alias newPhysicalSP S12;
	newPhysicalSP=([newPTBR + 2*((SP-1)/512)]*512) + ((SP-1)%512);
	[newPhysicalSP - 1]=-2;
endif;
ireturn;